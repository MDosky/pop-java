<?xml version="1.0"?>
<project name="PopJava" default="make-release-folder" basedir=".">

	    <property name="agent" value ="popjava.javaagent.POPJavaAgent"/>
	
        <property name="build.dir" value ="build"/>
        <property name="temp.dir" value ="temp"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
	    <property name="objgenclasses.dir" value="${classes.dir}/objgen"/>
        <property name="jar.dir"     value="${build.dir}/jar"/>
        
        <property name="release.dir" value ="release"/>
        
        <property name="javassist.jar" value="dependencies/javassist.jar"/>
        <property name="sshj.jar" value="dependencies/sshj-0.21.1-with-dependencies.jar"/>
        <property name="log4j.jar" value="dependencies/slf4j-nop-1.7.2.jar"/>
	    <property name="junit.jar" value="dependencies/junit-4.10.jar"/>
        <property name="junit-benchmark.jar" value="dependencies/junit-benchmarks-0.7.2.jar"/>
        
        <property name="popjava.jar" value="popjava.jar"/>
        <property name="testsuite.jar" value="testsuite.jar"/>
    	<property name="junit.out" value="junit.jar"/>
	    <property name="obj.map" value="testsuite.jar.map"/> 
        
        <property name="popjava.src" value ="workspace/popjava/src/popjava"/>
        <property name="testsuite.src" value ="workspace/popjava/src/testsuite"/>
    	<property name="junit.src" value ="workspace/popjava/src/junit"/>
        
        <property name="popjavac.dir" value ="popjavac"/>
        <property name="javadoc.dir" value ="doc"/>
        <property name="etc.dir" value ="etc"/>
        <property name="plugins.dir" value ="plugin"/>
		
		<property environment="env"/>
	
	<condition property="isWindows">
        <os family="windows" />
	 </condition>
		
<target name="clean" description="clean build directory">
    <delete dir="${build.dir}"/>
    <delete dir="${release.dir}"/>
</target>

<target name="make-popjava" description="build the popjava library">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${popjava.src}"
                destdir="${classes.dir}"
                classpath="${javassist.jar}:${sshj.jar}:${log4j.jar}:${junit.jar}:${junit-benchmark.jar}"
                debug="true" debuglevel="lines,vars,source"
                target="8"
                source="8"
        >
          <compilerarg value="-Xlint:deprecation,unchecked"/>
        </javac>
</target>

<target name="make-testsuite-java" depends="jar-popjava" description="build the the popjava testsuite">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${testsuite.src}"
                destdir="${classes.dir}"
        	    classpath="${jar.dir}/${popjava.jar}"
                debug="true" debuglevel="lines,vars,source"
                target="8"
                source="8"
        >
          <compilerarg value="-Xlint:deprecation,unchecked"/>
        </javac>
</target>

<target name="make-junit" depends="jar-popjava, make-testsuite-java" description="build popjava's junit tests">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${junit.src}"
                destdir="${classes.dir}"
                classpath="${jar.dir}/${popjava.jar}:${junit.jar}:${junit-benchmark.jar}"
                debug="true" debuglevel="lines,vars,source"
                target="8"
                source="8"
        >
          <compilerarg value="-Xlint:deprecation,unchecked"/>
        </javac>
</target>
	
<target name="make-testsuite-popc" depends="" unless="isWindows" description="build the the popjava testsuite">
	<exec dir="${testsuite.src}/popc-obj/integer" executable="make"/>
    <exec dir="${testsuite.src}/popc-obj/jinteger" executable="make"/>
</target>

<target name="jar-popjava" depends="make-popjava" description="create jar for popjava">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${popjava.jar}" basedir="${classes.dir}" 
                excludes="**/testsuite/**,**/objgen/**">
        	
        	<manifest>
                <attribute name="Premain-Class" value="${agent}" />
                <attribute name="Can-Redefine-Classes" value="true" />
                <attribute name="Can-Retransform-Classes" value="true" />
                <attribute name="Can-Set-Native-Method-Prefix" value="true" />
            </manifest>
        	
            <zipgroupfileset dir="." includes="${javassist.jar}"/>
            <zipgroupfileset dir="." includes="${sshj.jar}"/>
            <zipgroupfileset dir="." includes="${log4j.jar}"/>
        	<service type="javax.annotation.processing.Processor" provider="popjava.annotation.processors.POPClassProcessor" /> 
        </jar>
</target>
	
<target name="jar-testsuite" depends="make-testsuite-java, make-testsuite-popc" description="create jar for the popjava testsuite">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${testsuite.jar}" basedir="${classes.dir}" 
                excludes="**/popjava/**, **/objgen/**">
        </jar>
	
	<java classname="popjava.scripts.Popjrun" fork="true" output="${jar.dir}/${obj.map}">
        <classpath>
            <pathelement location="${jar.dir}/${popjava.jar}"/>
         </classpath>
		
		 <arg value="--listlong"/>
		 <arg value="${jar.dir}/${testsuite.jar}"/>
    </java>
</target>
	
	
<target name="run-tests" depends="clean, jar-popjava, jar-testsuite" description="run the test apps">
	
	<!--<java classname="testsuite.pure.integer.TestInteger" fork="true">
        <classpath>
            <pathelement location="${jar.dir}/${popjava.jar}"/>
        	<pathelement location="${jar.dir}/${testsuite.jar}"/>
         </classpath>
		
		<jvmarg value="-javaagent:${jar.dir}/${popjava.jar}"/>
    </java>
	
	<java classname="testsuite.pure.callback.CallBackMain" fork="true">
        <classpath>
            <pathelement location="${jar.dir}/${popjava.jar}"/>
            <pathelement location="${jar.dir}/${testsuite.jar}"/>
         </classpath>
		
        <jvmarg value="-javaagent:${jar.dir}/${popjava.jar}"/>
		<arg value="-codeconf=${jar.dir}/${obj.map}"/>
		
    </java>-->
	
	<java classname="testsuite.pure.sync.SynchronizationTest" fork="true">
        <classpath>
            <pathelement location="${jar.dir}/${popjava.jar}"/>
            <pathelement location="${jar.dir}/${testsuite.jar}"/>
         </classpath>
        
        <jvmarg value="-javaagent:${jar.dir}/${popjava.jar}"/>
        <arg value="-codeconf=${jar.dir}/${obj.map}"/>
        
    </java>
 </target>
	
<target name="run-testsuite" depends="jar-testsuite, jar-popjava" description="Run the testsuite">
    <java classname="testsuite.Testsuite" fork="true">
        <classpath>
            <pathelement location="${jar.dir}/${popjava.jar}"/>
            <pathelement location="${jar.dir}/${testsuite.jar}"/>
         </classpath>
    </java>
</target>

<target name="testsuite" description="Run the testsuite">
	<echo message="##############################"/>
	<echo message="#   POP-Java standard test   #"/>
	<echo message="##############################"/>
	<echo message=""/>
	<echo message="Starting POP-Java test suite"/>
	<echo message="########################################"/>
	<echo message=""/>
	<echo message="########################################"/>
	<echo message="Launching passing arguments test 1 / 2"/>
	<echo message="########################################"/>
	
    <java classname="testsuite.arg.MainArgTest" fork="true" resultproperty="test1">
		<jvmarg value="-javaagent:${env.POPJAVA_LOCATION}/JarFile/popjava.jar" />
        <classpath>
            <pathelement location="${env.POPJAVA_LOCATION}/JarFile/popjava.jar"/>
            <pathelement location="${env.POPJAVA_LOCATION}/JarFile/testsuite.jar"/>
         </classpath>
    </java>
	
	<echo message=""/>
	<echo message="########################################"/>
	<echo message="Launching passing arguments test 2 / 2"/>
	<echo message="########################################"/>
	
    <java classname="testsuite.multiobj.Mutliobj" fork="true" resultproperty="test2">
		<jvmarg value="-javaagent:${env.POPJAVA_LOCATION}/JarFile/popjava.jar" />
        <classpath>
            <pathelement location="${env.POPJAVA_LOCATION}/JarFile/popjava.jar"/>
            <pathelement location="${env.POPJAVA_LOCATION}/JarFile/testsuite.jar"/>
         </classpath>
    </java>
	
	<echo message=""/>	
	<echo message="########################################"/>
	<echo message="#   POP-Java 1.0 Test Suite finished   #"/>
	<echo message="########################################"/>
	<echo message=""/>	
	<echo message="Test 1 exit code: ${test1}"/>
	<echo message="Test 2 exit code: ${test2}"/>
</target>

<target name="make" depends="clean, jar-popjava, jar-testsuite, make-junit" description="Builds the whole sourcecode">
</target>

<target name="make-release-folder" depends="make" description="Creates the directory that will be installed">
  <delete dir="${temp.dir}"/>
  
  <!-- Create folders -->
  <mkdir dir="${release.dir}"/>
  <mkdir dir="${release.dir}/bin"/>
  <mkdir dir="${release.dir}/etc"/>
  <mkdir dir="${release.dir}/doc"/>
  <mkdir dir="${release.dir}/JarFile"/>
  <mkdir dir="${release.dir}/logFolder"/>
  
  <!-- Copy executables -->
  <copy file="${popjavac.dir}/popjc" todir="${release.dir}/bin"/>
  <copy file="${popjavac.dir}/popjrun" todir="${release.dir}/bin"/>
  <copy file="launch_testsuite" todir="${release.dir}"/>
  
  <!-- Copy jars -->
  <copy file="${jar.dir}/${popjava.jar}" todir="${release.dir}/JarFile"/>
  <copy file="${jar.dir}/${testsuite.jar}" todir="${release.dir}/JarFile"/>
  <copy file="${popjavac.dir}/popjparser/popjparser.jar" todir="${release.dir}/JarFile"/>
  
  
  <!-- Copy rest -->
  <copy todir="${release.dir}/doc">
    <fileset dir="${javadoc.dir}"/>
  </copy>
  
  <copy todir="${release.dir}/etc">
    <fileset dir="${etc.dir}"/>
  </copy>
  
  <copy file="${popjavac.dir}/xml/additional-parser-infos.xsd" todir="${release.dir}/etc"/>
  
  
  <copy todir="${release.dir}/plugin">
    <fileset dir="${plugins.dir}"/>
  </copy>
  
  <delete dir="${release.dir}/META-INF"/>
  
  <copy todir="${release.dir}/testsuite/popc-obj">
    <fileset dir="${testsuite.src}/popc-obj"/>
  </copy>
  
  
  <!-- Set filepremisions-->
  <chmod dir="${release.dir}" perm="774" includes="**/*" type="file"/>
       
  <chmod dir="${release.dir}" perm="775" includes="**/*" type="dir"/>

  <chmod dir="${release.dir}/bin" perm="775" includes="**/*"/>
       
  <chmod file="${release.dir}/launch_testsuite" perm="775"/>
       
  <chmod file="${release.dir}/logFolder" perm="777" type="both"/>
  <chmod file="${release.dir}/testsuite" perm="777" type="both"/>
</target>

</project>
