package popjava.scripts;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Popjavac {
	
	private static final String COMPILER_JAR = "C:\\Users\\asraniel\\workspace\\PopJava\\popjavac\\popjparser\\popjparser.jar";
	private static final String COMPILER_MAIN = "POPJParser";
	private static final String POPJAVA_JAR = "C:\\Users\\asraniel\\workspace\\PopJava\\release\\JarFile\\popjava.jar";
	private static final String JAVAC = "C:\\Program Files\\Java\\jdk1.7.0_11\\bin\\javac";
	
	private static final String NEWLINE = System.getProperty("line.separator");
	
	private static final String HELP_MESSAGE = "POP-Java Compiler v1.0\n\n"+

"This program is used to compile a POP-Java program\n\n"+

"Usage: popjc <options> <source files>\n\n"+

"OPTIONS:\n"+
"   -h, --help               Show this message\n"+
"   -n, --noclean            Do not clean the intermediate Java file generated by the POP-Java parser\n"+
"   -p, --popcpp <xml_file>  Compile a POP-Java parallel class for POP-C++ usage (Need XML additional informations file)\n"+
"   -j, --jar <filename>     Create a JAR archive with the given name (Need the JAR file name)\n"+
"   -v, --verbose            Verbose mode\n"+
"   -c, --classpath <files>  Include JAR or compiled Java class to the compilation process. Files must be separated by a semicolon \":\"\n\n"+

"OPTIONS FOR POP-C++ INTEROPERABILITY:\n"+
"   -x, --xmlpopcpp <files>  Generate a canvas of the POP-C++ XML additional informations file for the given Java files. This option must be used alone\n"+
"   -g, --generate <pjava>   Generate the POP-C++ partial implementation to use the given POP-Java parclass in a POP-C++ application (NOT IMPLEMENTED YET)\n";

	private static void printHelp() {
		System.out.println(HELP_MESSAGE);
	}
	
	public static void main(String [] args){
		if(args.length == 0 ||
				ScriptUtils.containsOption(args, "-h") ||
				ScriptUtils.containsOption(args, "--help")){
			printHelp();
			return;
		}
		
		List<String> arguments = ScriptUtils.arrayToList(args);
	
		final String jar = ScriptUtils.getOption(arguments, "", "-j", "--jar");
		
		System.out.println("Write to jar "+jar);
		System.out.println("Files to compile:");
		for(String file: arguments){
			System.out.println(file);
		}
		
		List<String> binaries = extractBinaries(arguments);
		
		List<String> classFiles = compileFiles(arguments);
		
		if(!jar.isEmpty()){
			jarFiles(jar, classFiles);
		}
	}
	
	private static List<String> extractBinaries(List<String> files){
		List<String> binaries = new ArrayList<String>();
		
		for(int i = 0; i < files.size(); i++){
			String file = files.get(i);
			if(file.endsWith(".jar") || file.endsWith(".class")){
				binaries.add(file);
				files.remove(i);
				i--;
			}
		}
		
		return binaries;
	}
	
	private static List<String> compileFiles(List<String> sourceFiles){
		String sources = "";
		for(int i = 0; i < sourceFiles.size(); i++){
			if(!isMain(sourceFiles.get(i))){
				sources += sourceFiles.get(i);
				if(i != sourceFiles.size() - 1){
					sources += File.pathSeparatorChar;
				}
			}			
		}
		
		while(sources.charAt(sources.length() - 1) == File.pathSeparatorChar){
			sources = sources.substring(0, sources.length() - 1);
		}
		
		List<String> javaFiles = new ArrayList<String>();
		List<String> convertedFiles = new ArrayList<String>();

		//Convert files to java if needed
		for(String file: sourceFiles){
			if(file.endsWith(".java")){
				javaFiles.add(file);
			}else{
				String javaFile = file.replace(".pjava", ".java");
				convertedFiles.add(javaFile);
				
				convertFile(file, javaFile, sources);
			}
		}
		
		List<String> allFiles = new ArrayList<String>(javaFiles);
		allFiles.addAll(convertedFiles);
		
		//Compile them
		return compileFiles(allFiles, null);
	}
	
	
	
	private static boolean grep(final File file, final String search) throws IOException{
		BufferedReader reader = new BufferedReader(new FileReader(file));
		
		String line;
		while((line = reader.readLine()) != null){
			if(line.contains(search)){
				reader.close();
				return true;
			}
		}
		
		reader.close();
		return false;
	}
	
	private static boolean isMain(final String input){
		try {
			return grep(new File(input), "public static void main");
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return false;
	}
	
	private static void convertFile(final String input, final String output, final String sources){
		try {
			//java -cp $POPJAVA_PARSER_PATH $POPJAVA_PARSER -file=$P -parclasses=$PARLIST > $FILENAME
			String command = "java -cp "+COMPILER_JAR +" "+COMPILER_MAIN;
			if(isMain(input)){
				command += " -m";
			}
			command += " -file="+input +" -parclasses="+sources;
			Process proc = Runtime.getRuntime().exec(command);
			System.out.println(command);
			
			BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
			BufferedWriter writer = new BufferedWriter(new FileWriter(new File(output)));
			
			String line;
			while((line = reader.readLine()) != null){
				writer.write(line + NEWLINE);
			}
			writer.close();
			
			BufferedReader errors = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
			while((line = errors.readLine()) != null){
				System.out.println(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private static List<String> compileFiles(List<String> javaFiles, List<String> classPathElements){
		ArrayList<String> outputFiles = new ArrayList<String>();
		//javac -cp ".:$ADD_CLASSPATH:$POPJAVA_JAR$CLASSPATHADD" $COMPILE_FILES $STDFILES

		
		String [] command = new String[3+javaFiles.size()];
		command[0] = JAVAC;
		command[1] = "-cp";
		command[2] = POPJAVA_JAR;
		
		int index = 3;
		
		for(String file: javaFiles){
			command[index++] = file;

			outputFiles.add(file.replace(".java", ".class"));
		}
		
		for(String arg: command){
			System.out.print(arg+" ");
		}
		System.out.println();
		
		try {
			Process p = Runtime.getRuntime().exec(command);
			if(p.waitFor() == 2){
				System.err.println("javac is not installed, please install the java jdk (not jre) or add it to the PATH");
			}
			
			BufferedReader ok = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String line;
			while((line = ok.readLine()) != null){
				System.out.println(line);
			}
			
			BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			while((line = error.readLine()) != null){
				System.out.println(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		return outputFiles;
	}
	
	private static void jarFiles(final String jar, List<String> classFiles){
		String command = "jar cf "+jar;
		for(String file: classFiles){
			command += " "+file;
		}
		
		try {
			Process p = Runtime.getRuntime().exec(command);
			if(p.waitFor() == 2){
				System.err.println("The jar command could not be found");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
