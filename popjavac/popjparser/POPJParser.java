/* Generated By:JavaCC: Do not edit this line. POPJParser.java */
/**
* Import all the needed librairie here
*/
import java.io.*;
import java.util.ArrayList;     //POP-Java import added
import java.util.HashMap;     //POP-Java impert added


public class POPJParser implements POPJParserConstants {
        /**
        * Class to hold modifiers.
        */
        static public final class ModifierSet
{
                /* Definitions of the bits in the modifiers field.  */
    public static final int PUBLIC = 0x0001;
    public static final int PROTECTED = 0x0002;
    public static final int PRIVATE = 0x0004;
    public static final int ABSTRACT = 0x0008;
    public static final int STATIC = 0x0010;
    public static final int FINAL = 0x0020;
    public static final int SYNCHRONIZED = 0x0040;
    public static final int NATIVE = 0x0080;
    public static final int TRANSIENT = 0x0100;
    public static final int VOLATILE = 0x0200;
    public static final int STRICTFP = 0x1000;

    /** A set of accessors that indicate whether the specified modifier
        is in the set. */

    public boolean isPublic(int modifiers)
    {
    return (modifiers & PUBLIC) != 0;
    }

    public boolean isProtected(int modifiers)
    {
    return (modifiers & PROTECTED) != 0;
    }

    public boolean isPrivate(int modifiers)
    {
    return (modifiers & PRIVATE) != 0;
    }

    public boolean isStatic(int modifiers)
    {
    return (modifiers & STATIC) != 0;
    }

    public boolean isAbstract(int modifiers)
    {
    return (modifiers & ABSTRACT) != 0;
    }

    public boolean isFinal(int modifiers)
    {
    return (modifiers & FINAL) != 0;
    }

    public boolean isNative(int modifiers)
    {
    return (modifiers & NATIVE) != 0;
    }

    public boolean isStrictfp(int modifiers)
    {
    return (modifiers & STRICTFP) != 0;
    }

    public boolean isSynchronized(int modifiers)
    {
    return (modifiers & SYNCHRONIZED) != 0;
    }

    public boolean isTransient(int modifiers)
    {
    return (modifiers & TRANSIENT) != 0;
    }

    public boolean isVolatile(int modifiers)
    {
    return (modifiers & VOLATILE) != 0;
    }

    /**
    * Removes the given modifier.
    */
    static int removeModifier(int modifiers, int mod)
    {
    return modifiers & ~mod;
    }
}

        /*
* POP-Java parser Holder. This static class is used to hold all the needed
* informations for the code generation during the parsing.
        */
        public static class Holder {
                public static boolean isMain=false;     //Say if the current class is the class with the main method
                public static boolean inMain=false;     //Say if the current token is in the main method
                public static int depthMain=0;                  //Depth inside the main (number of opened braces)
                public static boolean isParclass=false; //Say that the current class is a parallel class
                public static boolean hasDefaultConstructor=false;      //Say if the class has a default constrcutor
                public static String thisClassName="";  //Name of the parallel class
                public static boolean canPrintImport = true;    //Say if the import can be added
                public static boolean hasPackage=false; //Say if the class has a package declaration
                public static Parclass parclass;                                //Variable used to hold every extracted informations (semantics, object description)
                public static int constructorId = 0;            //Variable used to give an id to each constrcutor
                public static Token first=null;                                 //First token of the file
                public static ArrayList<String> parclasses = new ArrayList<String>();   //List of the parclasses of the application
    public static HashMap<String, String> _hm_parclasses = new HashMap<String, String>();
        }

        //Constructor of the parser with the given file name as argument
        public POPJParser(String fileName)
{
                this(System.in);
    try {
                        ReInit(new FileInputStream(new File(fileName)));
                } catch(Exception e) {
                        e.printStackTrace();
                }
        }

        //POP-Java added method : This method is used to print the indentation of the code
        public static void printIndent(int indent){
                for(int i=0; i < indent; i++)
                        System.out.print("\u005ct");
        }

        //POP-Java added method : This method is used to print a String and a carriage return with the given indentation
        public static void println(String s, int indent){
                printIndent(indent);
                System.out.println(s);
        }

        //POP-Java added method : This method is used to print a String with the given indentation
        public static void print(String s, int indent){
                printIndent(indent);
                System.out.print(s);
        }

        //POP-Java added method : This method is used to print the needed parclass or main class import
        public static void printImport(boolean isMain){
                println("//Import added by the POP-Java compiler",0);
                println("import popjava.PopJava;",0);
                println("import popjava.base.POPException;",0);
                if(isMain){
                        println("import popjava.baseobject.ObjectDescription;",0);
                        println("import popjava.system.POPSystem;",0);
                } else {
                        println("import popjava.base.POPObject;",0);
                        println("import popjava.base.Semantic;",0);
        println("import popjava.serviceadapter.POPAppService;",0);
        println("import popjava.system.POPSystem;",0);
                }
                println("",0);
        }

        //POP-Java added method : This method is used to print the special token (comment)
        public static void printSpecialToken(Token special, int indent){
                while(special!=null){
                        print(special.toString(), 0);
                        special = special.specialToken;
                }
                print("", indent);
        }

        /* 
        * POP-Java parser main. The parser can take several arguments. All the main has been rewritten from the standard Java1.6 grammar file
* -file=FILENAME								The file to be parsed
* -parclasses=PAR1:PAR2:PARN		The parclasses of the applications. Mandatory to change the instantiation process of the Parallel classes
        * -popcinfos=filename.xml			XML File that contains the additional informations for the POP-C++ compilation
* -parse-only									Parse the given file but don't generate code
        */
public static void main(String args[]) {
    POPJParser parser=null;                             //Instance of the parser
    boolean printPOPCInfo=false;        //Tell if the code generator can print the POP-C++ special informations
    boolean parseOnly = false;          //This option is used to parse only the code and not generate the Java code
    boolean popc=false;                                         //Tell if it is a special compilation with POP-C++ special informations
    String filename = "";                                       //Name of the file to parse
    String popcinfosFile = "";          //Path of the file with popc informations
    ArrayList<String> parclasses = new ArrayList<String>();     //Array containing the Name of application parclasses

    //Retriev arguments
    for (int i = 0; i < args.length; i++) {
        if (args[i].startsWith("-file=")) {
            filename = args[i].substring(args[i].indexOf("=")+1);
        } else if (args[i].startsWith("-m")) {
            Holder.isMain = true;
        } else if (args[i].startsWith("-parclasses=")) {
            String parstr = args[i].substring(args[i].indexOf("=")+1);
            String parclass = "";
            for (int j = 0; j <= parstr.length(); j++) {
                if (j==parstr.length() || parstr.charAt(j) == File.pathSeparatorChar){
                    if(!parclass.endsWith(".pjava")){
                        if(parclass.isEmpty()){
                            System.err.println("parclasses parameter was malformed, trying to recover");
                            break;
                        }
                        System.err.println("Parclass must be POP-Java file (.pjava)");
                        System.exit(1);
                    }
                    int slash = parclass.lastIndexOf(File.separatorChar);
                    if(slash!=0){
                        slash++;
                    }
                    parclasses.add(parclass.substring(slash, parclass.indexOf(".")));
                    parclass = "";
                } else {
                    parclass += parstr.charAt(j);
                }
            }
            int slash = filename.lastIndexOf(File.separatorChar);
            if(slash!=0){
                slash++;
            }
            parclasses.add(filename.substring(slash, filename.indexOf(".")));
        } else if (args[i].startsWith("-popcinfos=")) {
            popc=true;
            popcinfosFile = args[i].substring(args[i].indexOf("=")+1);
        } else if (args[i].startsWith("-parse-only")) {
            parseOnly=true;
        } else {
            System.err.println("Bad arguments");
            System.exit(1);
        }
    }

    //Check if a file has been given
    if(filename.equals("")){
            System.err.println("No file to parse");
            System.exit(1);
    }

    //Create the parser
    try {
        parser = new POPJParser(new java.io.FileInputStream(filename));
    } catch (java.io.FileNotFoundException e) {
        System.err.println("POP-Java Parser Version 1.0:  File " + filename + " not found.");
        System.exit(1);
    }

    //Call the parser to parse the file
    try {
        parser.CompilationUnit();
    } catch (ParseException e) {
        System.err.println("POP-Java Parsing error [lXX]: "+e.getMessage());
        System.exit(1);
    }

    //If the option parse only is given, the program is exited here
    if(parseOnly){
        System.exit(0);
    }


    /*
    * Once the parsing is done, the code generation can be set
    * All the following code is used to analyze the token and produce Java code from POP-Java
    */

    boolean wasReturn = false;                                                  //Used to indent the code
    boolean printDefaultConstructor=false;      //Use to print the default constructor if this one is not defined
    boolean forward = true;                                                                     //If true, foward to next token
    boolean space = true;                                                                               //If true print a space
    boolean constructor=false;                                                  //Used to know if the current token is in a constructor
    boolean parclassInstance = false;                           //Used to know if an identifier with the class name has been found
    boolean inParen = false;                                                            //Used to know if the current token is in a parenthesis
    boolean canPrintCatch=false;                                                //Used to know when to print the end of the catch statement
    boolean wasPackage=false;                                                           //Used to know when the package declaration is passed
    boolean parclassArray=false;                                                //Used to know when an array of parclass is declared
    String  parclassIdentifier="";                                      //Used to hold the name of the parclass for the array
    String      arrayIdentifier="";                                                     //Used to hold the identifier of the parclass array

    int constructorId=0;                                                                                //Constructor id to retrieve information extracted from the POP-Java code
    int indent = 0;                                                                                                     //Variable used to indent the code
    int lastKind = 0;                                                                                           //Keep the kind of the last token


    //Retrieve additional informations for the code generation if the Parclass must be generated to work with POP-C++
    ClassInformation ci = null;
    if(popc){
        XMLWorker xmlWorker = new XMLWorker();
        ConfigurationWorker cw=null;
        try {
            cw = new ConfigurationWorker();
        } catch (Exception e){
            System.err.println("Error loading the configuration file");
            System.exit(1);
        }
        String popjava_location = cw.getValue(ConfigurationWorker.POPJ_LOCATION_ITEM);
        //Validate the additional information file
        if(!xmlWorker.isValid(popcinfosFile, popjava_location+"/etc/additional-parser-infos.xsd")){
            System.err.println("The additional information file is not valid.");
            System.exit(1);
        }
        //Load the informations from the POP-C++ additional informations file
        ClassInformationExtracter cix = new ClassInformationExtracter(popcinfosFile);
        cix.loadFile();
        ci = cix.getInfo(filename);
        if (ci!=null){
                printPOPCInfo=true;
        }
    }




    /* ############################
    *  CODE GENERATOR STARTS HERE
    * ############################*/


    //Keep the current token
    Token tok = Holder.first;

    //Read trough all token until the last one
    while (tok != null){

        //Check if it's the last token
        if(tok.next == null){
            print(tok.toString(),0);
            break;
        }

        //Set the forward boolean to true
        forward = true;

        //Print out special token
        if(tok.specialToken != null){
            Token s = tok.specialToken;
            printSpecialToken(s, indent);
        }

        //Insert import for main class or for parclass at the right place
        if(Holder.canPrintImport){
            printImport(Holder.isMain);
            Holder.canPrintImport = false;
        }



        //Apply rules to some special token

        //Replace keyword parclass by class and add needed extends
        if(tok.kind == PARCLASS){
            print("class ",0);
            tok = tok.next;
            print(tok.toString(),0);
            tok = tok.next;
            //If the parclass does not inherit from a super class then add the extends statement 
            if(tok.kind != EXTENDS){
                print(" extends POPObject ",0);
                forward = false;
            }
            //Else just let the current extends statement
            else {
                print(" "+tok.toString(),0);
            }
            printDefaultConstructor=true;
        }
        //If the current token is package, save this point to know that we can print the import after
        else if (tok.kind == PACKAGE){
            print(tok.toString(), 0);
            wasPackage = true;
        }
            //Print the token new only if the object instantiated is not a parclass
        else if(tok.kind == NEW){
            String id = tok.next.toString();
            if(!parclasses.contains(id)){
                print(tok.toString(),0);
            }else {
                print("("+id+")PopJava.newActive("+id+".class", 0);
                tok = tok.next.next; //Go to first parameter
                if(tok.next.kind != RPAREN){
                    print(",", 0);
                }
                parclassInstance = false;
            }
        }
        //handle POP-Java method
        else if(tok.kind == PUBLIC && tok.next.next.next.next.next.kind == LPAREN){
            while(tok.kind != LPAREN){
            if(tok.kind != SYNC && tok.kind != ASYNC && tok.kind != SEQ && tok.kind != CONC && tok.kind != MUTEX){
                print(tok.toString()+" ",0);
            }
            tok = tok.next;
            }
            print(tok.toString()+" ",0);
            tok = tok.next;
            String toBePrinted="";
            do{
            String id = tok.toString();
            if(id.equals(Holder.thisClassName) || parclasses.contains(id)){
                toBePrinted += tok.next.toString()+"=("+id+")PopJava.newActive("+id+".class, "+tok.next.toString()+".getAccessPoint());\u005cn";
                print(id+" "+tok.next.toString(),0);
                tok = tok.next.next;
            } else {
                print(tok.toString()+" ", 0);
                tok = tok.next;
            }
            } while(tok.kind != LBRACE);

            if(!toBePrinted.equals("")){
            println("throws POPException {", indent++);
            print(toBePrinted, indent);
            printIndent(indent);
            } else {
            println("{", indent++);
            printIndent(indent);
            }
        }

        //If the token is an identifier, check if it's an instantiation
        else if(tok.kind == IDENTIFIER){
            if(tok.toString().equals("System") && !Holder.isMain){ //Check for System.out.pritnln call and rewrite it
                if(tok.next.next.toString().equals("out") && tok.next.next.next.next.toString().equals("println")){
                    print("POPSystem.writeLog", 0);
                    tok = tok.next.next.next.next.next;
                    while(tok.kind != SEMICOLON){
                        print(tok.toString(), 0);
                        tok = tok.next;
                    }
                    println(";", 0);
                    print("", indent);
                }
            } else {
                boolean printThis= true;
                if(Holder._hm_parclasses.containsKey(tok.toString()) && tok.next.kind == ASSIGN){
                    if(tok.next.next.kind == NEW){
                        String _parCl = Holder._hm_parclasses.get(tok.toString());

                        String varName = tok.toString();

                        while(tok.kind != LPAREN){//Move up to constructor parameters
                            tok = tok.next;
                        }
                        tok = tok.next;

                        print(varName+" = ("+_parCl+")PopJava.newActive("+_parCl+".class", 0);

                        if(tok.kind != RPAREN){
                            print(",", 0);
                        }

                        while(tok.kind != SEMICOLON){
                            print(tok.toString(), 0);
                            tok = tok.next;
                        }
                        println(";", 0);
                        print("", indent);
                    } else {
                        String _parCl = Holder._hm_parclasses.get(tok.toString());
                        print(tok.toString()+" = ("+_parCl+")PopJava.newActive("+_parCl+".class, "+tok.next.next.toString()+".getAccessPoint())", 0);
                        println(";", 0);
                        print("", indent);
                        while(tok.kind != SEMICOLON){
                            tok = tok.next;
                        }
                        printThis = false;
                    }
                }
                //If it was the new keyword before, modify the instantiation
                else if(parclassInstance && lastKind == NEW){
                    String _parID = tok.toString();
                    tok = tok.next;
                    if(tok.kind == DOT){
                        while(tok.kind == DOT){
                            _parID+="."+tok.next.toString();
                            tok = tok.next.next;
                        }
                    }

                    if(parclasses.contains(_parID)){
                        if(tok.next.kind == RPAREN){
                                inParen = false;
                                print("("+_parID+")PopJava.newActive("+_parID+".class", 0);
                                canPrintCatch = true;
                        }
                        else {
                                inParen=false;
                                print("("+_parID+")PopJava.newActive("+_parID+".class,", 0);
                                canPrintCatch = true;
                        }
                    }else{
                        print(_parID+tok.toString() ,0);
                    }
                    parclassInstance = false;
                } else {
                    String id = tok.toString();

                    if((id.equals(Holder.thisClassName) || parclasses.contains(id)) && tok.next.next.kind == SEMICOLON){
                        Holder._hm_parclasses.put(tok.next.toString(), id);
                        parclassInstance = true;
                    }
                    //Check if its the beginning of a constructor
                    else if(id.equals(Holder.thisClassName) && (tok.next.next.next.next.next.kind != NEW) && (tok.next.next.next.kind != NEW) && (lastKind != NEW) && !inParen){
                            constructor = true;
                    }
                    //Parclass instantiation
                    else if((id.equals(Holder.thisClassName) || parclasses.contains(id)) && ((tok.next.next.next.kind == NEW) || (tok.next.next.next.next.next.kind == NEW)) && !inParen) {
                        //Handle parclass array instantiation
                        if(tok.next.kind == LBRACKET){
                            parclassArray = true;
                            parclassIdentifier = id;
                            arrayIdentifier = tok.next.next.next.toString();
                            do{
                                print(tok.toString()+" ", 0);
                                tok = tok.next;
                            } while(tok.kind != SEMICOLON);
                                println(tok.toString(), 0);
                                tok = tok.next;
                                print("", indent);
                        } else {
                                //Normal parclass instantiation
                                parclassInstance = true;
                        }
                        //Print the beginning of Try-Catch statement if the next is a parclass instantiation
                        /*if(!Holder.isMain && !parclassArray){
                                printThis = false;
                                println(tok.toString()+" "+tok.next.toString()+"=null;", 0);
                                println("try{",indent);
                                
                                indent++;
                                print("",indent);
                        }*/
                    }
                    if(printThis){ //Print if not printed yet
                            print(tok.toString(), 0);
                    }
                }
            }
        }
        //Check the main method of the main class	
        else if (Holder.isMain && tok.kind == PUBLIC && tok.next.kind == STATIC && tok.next.next.kind == VOID &&
                                                        tok.next.next.next.image.equals("main")){
            //Set to true when inside the main method
            Holder.inMain=true;
            //Print the needed code lines at the beginning of the main
            println("public static void main(String... args){", 0);
            indent++;
            println("try{", indent++);
            println("POPSystem.initialize(args);", indent);

            println("if(args.length > 0 && args[0].startsWith(\u005c"-codeconf=\u005c")){", indent++);
                        println("String[] tmpArg = new String[args.length-1];", indent);
                        println("for (int i = 0; i < tmpArg.length; i++) {", indent++);
            println("tmpArg[i] = args[i+1];", indent);
            println("}", --indent);
                        println("args = tmpArg;", indent);
            println("}", --indent);
            print("",indent);
                                //Go to the next useful token
                                while(tok.kind != LBRACE)
                                        tok = tok.next;
                        }
                        //Check the end of a line or a statement by checking ; or }
                        else if(tok.kind == SEMICOLON || tok.kind == LBRACE){
                                //Print the token at the end of the line
                                println(tok.toString(), 0);
                                //Handling the parclass array instantiation
                                if(parclassArray){
                                        /*println("for(int parCnt=0; parCnt < "+arrayIdentifier+".length; parCnt++){", indent++);
            println("try{", indent++);
                                        println(arrayIdentifier+"[parCnt] = ("+parclassIdentifier+")PopJava.newActive("+parclassIdentifier+".class);", indent--);
            println("} catch(POPException e) {", indent++);
                                        println("e.printStackTrace();", indent--);
                                        println("}", indent--);
                                        println("}", indent);
                                        parclassArray=false;*/
                                }
                                //If the main is currently parsed, increment the depth in code
                                if(tok.kind == LBRACE && Holder.inMain )
                                        Holder.depthMain++;
                                //If the package was before, the import can be printed now
                                if(wasPackage){
                                        Holder.canPrintImport = true;
                                        wasPackage=false;
                                }
                                //Print the end of the try-catch statement
                                if(canPrintCatch){
                                        if(!Holder.isMain){
                                                indent--;
                                                System.err.println("Catch A");
                                                println("} catch(POPException e) {", indent++);
                                                println("e.printStackTrace();", indent--);
                                                println("}", indent);
                                        }
                                        canPrintCatch=false;
                                }

                                wasReturn=true;
                                //Handling the left brace
                                if(tok.kind == LBRACE) {
                                        //Increment the indentation
                                        indent++;

                                //Printing the default constructor
                                        if(printDefaultConstructor && !Holder.parclass.hasDefaultConstructor() && !Holder.isMain){
                                                println("public "+Holder.thisClassName+"(){", indent++);
                                                println("Class<?> c = "+Holder.thisClassName+".class;", indent);
                                                //Print special informations for POP-C++ usage
                                                if(printPOPCInfo){
                                                        println("setClassId("+ci.getClassUID()+");", indent);
                                                        if(!ci.getClassName().equals("") || ci.getClassName()!=null)
                                                                println("setClassName(\u005c""+ci.getClassName()+"\u005c");", indent);
                                                        println("hasDestructor("+ci.hasDestructor()+");", indent);
                                                }

                                                println("initializePOPObject(c);", indent);
                                                ArrayList<Semantic> sem = Holder.parclass.getSemantics();
                                                for (int i = 0; i < sem.size(); i++){
                                                        println(sem.get(i).toString(), indent);
                                                }
                                                println("}",--indent);
                                                printDefaultConstructor=false;
                                        }

                                        //If we are in the constructor print the information
                                        if(constructor){
                                                println("Class<?> c = "+Holder.thisClassName+".class;", indent);
                                                if(printPOPCInfo){
                                                        println("setClassId("+ci.getClassUID()+");", indent);
                                                        if(ci.getClassName().length() != 0)
                                                                println("setClassName(\u005c""+ci.getClassName()+"\u005c");", indent);
                                                        println("hasDestructor("+ci.hasDestructor()+");", indent);
                                                }
                                                println("initializePOPObject(c);", indent);
                                                //Print the objects description
                                                Constructor con = Holder.parclass.getConstructor(constructorId++);
                                                ArrayList<ObjectDescription> ods = con.getOD();
                                                for (int i = 0; i < ods.size(); i++){
                                                        println(ods.get(i).toString(), indent);
                                                }
                                                //Print the semantics extracted before
                                                ArrayList<Semantic> sem = Holder.parclass.getSemantics();
                                                for (int i = 0; i < sem.size(); i++){
                                                                println(sem.get(i).toString(), indent);
                                                }
                                                constructor = false;
                                        }
                                }
                                if(tok.next.kind != RBRACE){
                                                print("", indent);
                                }
                        }
                        //Handle right brace
                        else if(tok.kind == RBRACE){
                                //If it's the main class and the depth is 0, we can print the end of the try catch statement
                                if(Holder.inMain){
                                        if(Holder.depthMain==0){
                println("POPSystem.end();", indent);
                                                indent--;
                                                println("} catch(POPException e) {", indent++);
                println("POPSystem.end();", indent);
                                                println("System.err.println(\u005c"POP-Java exception catched :\u005c"+e.errorMessage);",indent--);
                                                println("}", indent--);
                                                print("",indent);
                                                Holder.inMain=false;
                                        } else {
                                                Holder.depthMain--;
                                        }
                                }
                                //Decrement indentation
                                indent--;
                                //Print the brace and the indentation for the next line
                                wasReturn =true;
                                println(tok.toString(), indent);
                                if(tok.next.next != null)
                                        print("", indent);
                        }
                        //Skip Object description (Not printed like this in the final Java code)
                        else if (tok.kind == AT && tok.next.kind == LBRACE){
                                while (tok.kind != RBRACE)
                                        tok = tok.next;
                        }
                        //SKIP POP-Java semantics keywords
                        else if (tok.kind == SYNC || tok.kind == ASYNC || tok.kind == SEQ || tok.kind == CONC || tok.kind == MUTEX){
                                space = false;
                        }
                        //Check if it's in the parenthesis
                        else if (tok.kind == LPAREN){
                                print(tok.toString(),0);
                                inParen = true;
                        }
                        //Check if it's the end of the parenthesis
                        else if (tok.kind == RPAREN){
                                print(tok.toString(),0);
                                inParen = false;
                        }
                        //if the token is this			
                        else if (tok.kind == THIS && Holder.isParclass && tok.next.kind != DOT){
                                print("("+Holder.thisClassName+")PopJava.newActive("+Holder.thisClassName+".class, this.getAccessPoint())",0);
                        }
                        //If no rules apply just print the token
                        else {
                                print(tok.toString(), 0);
                        }
                        //Place space between token
                        if(tok.kind != DOT && tok.next.kind != DOT && tok.next.kind !=
                                        LPAREN && tok.kind != LPAREN && tok.next.kind != SEMICOLON &&   tok.next.kind !=
                                        RPAREN && tok.kind != ASYNC && tok.kind != SYNC && tok.kind != SEQ &&
                                        tok.kind != CONC && tok.kind != MUTEX){
                                if(!wasReturn){
                                        print(" ", 0);
                                } else {
                                        wasReturn = false;
                                }
                                space = true;
                        }
                        //Go to the next token
                        if(forward){
                                lastKind = tok.kind;
                                tok = tok.next;
                        }

                }
}

/*****************************************
* THE JAVA LANGUAGE GRAMMAR STARTS HERE *
*****************************************/

/*
* Program structuring syntax follows.
*/
  final public void CompilationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_1;
      }
      ImportDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PARCLASS:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_2;
      }
      TypeDeclaration();
    }
    jj_consume_token(0);
  }

/* POP-Java modification. Add information into the Holder
* Hold the first token for the code generation and hold 
* some informations about the package.
*/
  final public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
            Holder.first=token; Holder.hasPackage=true; Holder.canPrintImport=false;
    Name();
    jj_consume_token(SEMICOLON);
  }

/* POP-Java modification. Add information into the Holder.
* Hold the first token if not hold by the package declaration.
*/
  final public void ImportDeclaration() throws ParseException {
    jj_consume_token(IMPORT);
           if(Holder.first==null) Holder.first=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

/*
* Modifiers. We match all modifiers in a single rule to reduce the chances of
* syntax errors for simple modifier mistakes. It will also enable us to give
* better error messages.
*/
  final public int Modifiers() throws ParseException {
int modifiers = 0;
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
           modifiers |= ModifierSet.PUBLIC;
        break;
      case STATIC:
        jj_consume_token(STATIC);
           modifiers |= ModifierSet.STATIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
              modifiers |= ModifierSet.PROTECTED;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
            modifiers |= ModifierSet.PRIVATE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
          modifiers |= ModifierSet.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
             modifiers |= ModifierSet.ABSTRACT;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                 modifiers |= ModifierSet.SYNCHRONIZED;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
           modifiers |= ModifierSet.NATIVE;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
              modifiers |= ModifierSet.TRANSIENT;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
             modifiers |= ModifierSet.VOLATILE;
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
             modifiers |= ModifierSet.STRICTFP;
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/*
* Declaration syntax follows.
*/
  final public void TypeDeclaration() throws ParseException {
int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PARCLASS:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifiers = Modifiers();
                          if(Holder.first==null) Holder.first=token;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
      case PARCLASS:
        ClassOrInterfaceDeclaration(modifiers);
        break;
      case ENUM:
        EnumDeclaration(modifiers);
        break;
      case AT:
        AnnotationTypeDeclaration(modifiers);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* POP-Java modification. The class declaration can now have the modifier parclass.
* If the modifier is parclass, add information into the Holder
* Add parclass keyword accepted ad a class declaration.
* Hold some informations and create the Parclass object to hold
* informations about the parclass.
*/
  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
boolean isInterface = false;
boolean isParclass = false;
Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                          isInterface = true;
      break;
    case PARCLASS:
      jj_consume_token(PARCLASS);
                                                               Holder.isParclass = true;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
        if(Holder.isParclass){
            Holder.parclass = new Parclass(t.toString());
            Holder.thisClassName=t.toString();
            t=null;
        } else if(!Holder.isMain){
            {if (true) throw new ParseException("This class is not a parclass. parclass keyword missing.");}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsList(isInterface);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(isInterface);
      break;
    default:
      ;
    }
    ClassOrInterfaceBody(isInterface);
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
boolean extendsMoreThanOne = false;
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_4;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceType();
                               extendsMoreThanOne = true;
    }
    if (extendsMoreThanOne && !isInterface){
        {if (true) throw new ParseException("A class cannot extend more than one other class");}
    }
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
    jj_consume_token(IMPLEMENTS);
    ClassOrInterfaceType();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_5;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceType();
    }
    if (isInterface)
        {if (true) throw new ParseException("An interface cannot implement other interfaces");}
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(false);
      break;
    default:
      ;
    }
    EnumBody();
  }

  final public void EnumBody() throws ParseException {
    jj_consume_token(LBRACE);
    EnumConstant();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      EnumConstant();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASYNC:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONC:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case MUTEX:
        case NATIVE:
        case PRIVATE:
        case PARCLASS:
        case PROTECTED:
        case PUBLIC:
        case SEQ:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_7;
        }
        ClassOrInterfaceBodyDeclaration(false);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void EnumConstant() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Arguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassOrInterfaceBody(false);
      break;
    default:
      ;
    }
  }

  final public void TypeParameters() throws ParseException {
    jj_consume_token(LT);
    TypeParameter();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_8;
      }
      jj_consume_token(COMMA);
      TypeParameter();
    }
    jj_consume_token(GT);
  }

  final public void TypeParameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      TypeBound();
      break;
    default:
      ;
    }
  }

  final public void TypeBound() throws ParseException {
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_9;
      }
      jj_consume_token(BIT_AND);
      ClassOrInterfaceType();
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    jj_consume_token(LBRACE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASYNC:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONC:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case MUTEX:
      case NATIVE:
      case PRIVATE:
      case PARCLASS:
      case PROTECTED:
      case PUBLIC:
      case SEQ:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_10;
      }
      ClassOrInterfaceBodyDeclaration(isInterface);
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
boolean isNestedInterface = false;
int modifiers;
    if (jj_2_4(2)) {
      Initializer();
    if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASYNC:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONC:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case MUTEX:
      case NATIVE:
      case PRIVATE:
      case PARCLASS:
      case PROTECTED:
      case PUBLIC:
      case SEQ:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
        case PARCLASS:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        default:
          if (jj_2_2(2147483647)) {
            ConstructorDeclaration();
          } else if (jj_2_3(2147483647)) {
            FieldDeclaration(modifiers);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASYNC:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONC:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case MUTEX:
            case SEQ:
            case SHORT:
            case SYNC:
            case VOID:
            case IDENTIFIER:
            case LT:
              MethodDeclaration(modifiers);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
    Type();
                if(Holder.isParclass && modifiers == ModifierSet.PUBLIC)
                        {if (true) throw new ParseException("A parclass cannot have public attribute.");}
    VariableDeclarator();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      ;
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      label_13:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        VariableInitializer();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/* POP-Java modification. POP-Java semantics included in the method declaration and hanlding error
* Asynchronous method must have return value to void. Parallel method must have modifier to public.
* Interface-side and broker-side semantic are mandatory.
*
* Production rule modified for POP-Java. Accept key word sync, async and conc, seq, mutex.
* A interface-side semantic and a broker-side semantic are required for every public method.
* Semantics are stored in the Parclass object. 
* An asynchronous method must have void as the return type otherwise an exception is thrown.
*/
  final public void MethodDeclaration(int modifiers) throws ParseException {
        boolean isParallelMethod=false;
        Token is=null, bs=null, id=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASYNC:
    case SYNC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYNC:
        is = jj_consume_token(SYNC);
        break;
      case ASYNC:
        is = jj_consume_token(ASYNC);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        bs = jj_consume_token(SEQ);
        break;
      case CONC:
        bs = jj_consume_token(CONC);
        break;
      case MUTEX:
        bs = jj_consume_token(MUTEX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                            isParallelMethod=true;
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONC:
    case MUTEX:
    case SEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        jj_consume_token(SEQ);
        break;
      case CONC:
        jj_consume_token(CONC);
        break;
      case MUTEX:
        jj_consume_token(MUTEX);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       {if (true) throw new ParseException("sync or async must be specified");}
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    ResultType();
                //Check if the method interface-side semantic is asynchrnous, the return type must be void.
                if(is != null && is.kind == ASYNC && token.kind != VOID)
                        {if (true) throw new ParseException("An asynchronous method cannot return a value.");}
    id = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
                //Check if the method modifier is public
                if(isParallelMethod){
                        if((modifiers & ModifierSet.PUBLIC) == 0)
                                {if (true) throw new ParseException("A parallel method must be public");}
                        //Store the semantics for code generation
                        Holder.parclass.addSemantic(id.toString(), is.toString(), bs.toString());
                        //Realease the token to be garbage collected
                        is=null; bs=null; id=null;
                }
  }

  final public Token MethodDeclarator() throws ParseException {
 Token id=null;
    id = jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_14;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
         {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public int FormalParameters() throws ParseException {
  int nbParameter=0;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
                         nbParameter++;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_15;
        }
        jj_consume_token(COMMA);
        FormalParameter();
                                                                  nbParameter++;
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
          {if (true) return nbParameter;}
    throw new Error("Missing return statement in function");
  }

  final public void FormalParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      ;
    }
    Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      break;
    default:
      ;
    }
    VariableDeclaratorId();
  }

/* POP-Java new production rule.
* Productin rule added for POP-Java.
* Specify the object descritption declaration @{ }
* An object description declaration must contains one or more 
* object description blocks.
*/
  final public void ObjectDescriptionDeclaration() throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(LBRACE);
    label_16:
    while (true) {
      ObjectDescritptionBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OD:
        ;
        break;
      default:
        break label_16;
      }
    }
    jj_consume_token(RBRACE);
  }

/* POP-Java new production rule.
* Production rule added for POP-Java
* Define an object description block od.NAME(param1, param2, ... , paramN);
* The object description block are stored for the code generation
*/
  final public void ObjectDescritptionBlock() throws ParseException {
        int tokenId;
        String params="";
    jj_consume_token(OD);
    jj_consume_token(DOT);
    tokenId = OD();
    jj_consume_token(LPAREN);
    params = ObjectDescriptionParameters();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                //Save the object description to generate the code
                Holder.parclass.addOD(Holder.constructorId, tokenId, params);
  }

/* POP-Java new production rule.
* Production rule added for POP-Java
* All parameters of an object description
*/
  final public String ObjectDescriptionParameters() throws ParseException {
    String params="";
    String p;
    p = ObjectDescriptionParameter();
                                       params += p;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_17;
      }
      jj_consume_token(COMMA);
      p = ObjectDescriptionParameter();
                                                                                            params+=","+p;
    }
        {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

/* POP-Java new production rule.
* Production rule added for POP-Java
* Single parameter of an object description
*/
  final public String ObjectDescriptionParameter() throws ParseException {
        Token p=null;
        String param;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      p = jj_consume_token(IDENTIFIER);
            param = p.image; p=null;
            {if (true) return param;}
      break;
    case INTEGER_LITERAL:
      p = jj_consume_token(INTEGER_LITERAL);
            param = p.image; p=null;
            {if (true) return param;}
      break;
    case FLOATING_POINT_LITERAL:
      p = jj_consume_token(FLOATING_POINT_LITERAL);
            param = p.image; p=null;
            {if (true) return param;}
      break;
    case CHARACTER_LITERAL:
      p = jj_consume_token(CHARACTER_LITERAL);
            param = p.image; p=null;
            {if (true) return param;}
      break;
    case STRING_LITERAL:
      p = jj_consume_token(STRING_LITERAL);
            param = p.image; p=null;
            {if (true) return param;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* POP-Java new production rule.
* Production rule added for POP-Java
* Define all od token that can be parsed in an object description block
*/
  final public int OD() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ODURL:
      jj_consume_token(ODURL);
                  {if (true) return token.kind;}
      break;
    case ODSEARCH:
      jj_consume_token(ODSEARCH);
                       {if (true) return token.kind;}
      break;
    case ODMANUAL:
      jj_consume_token(ODMANUAL);
                       {if (true) return token.kind;}
      break;
    case ODWALLTIME:
      jj_consume_token(ODWALLTIME);
                         {if (true) return token.kind;}
      break;
    case ODPOWER:
      jj_consume_token(ODPOWER);
                      {if (true) return token.kind;}
      break;
    case ODMEMORY:
      jj_consume_token(ODMEMORY);
                       {if (true) return token.kind;}
      break;
    case ODBANDWIDTH:
      jj_consume_token(ODBANDWIDTH);
                          {if (true) return token.kind;}
      break;
    case ODDIRECTORY:
      jj_consume_token(ODDIRECTORY);
                          {if (true) return token.kind;}
      break;
    case ODJOBURL:
      jj_consume_token(ODJOBURL);
                       {if (true) return token.kind;}
      break;
    case ODEXECUTABLE:
      jj_consume_token(ODEXECUTABLE);
                           {if (true) return token.kind;}
      break;
    case ODPROTOCOL:
      jj_consume_token(ODPROTOCOL);
                         {if (true) return token.kind;}
      break;
    case ODENCODING:
      jj_consume_token(ODENCODING);
                         {if (true) return token.kind;}
      break;
    case ODRUNLOCAL:
      jj_consume_token(ODRUNLOCAL);
                         {if (true) return token.kind;}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* POP-Java modification.
* Modified for POP-Java language specification
* Add the possibility to add object description.
* OD are stored for each constrcutor for the code generation
*/
  final public void ConstructorDeclaration() throws ParseException {
  int nbParam=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    jj_consume_token(IDENTIFIER);
    nbParam = FormalParameters();
                                              Holder.parclass.addConstructor(Holder.constructorId, nbParam);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      ObjectDescriptionDeclaration();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_6(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case PARCLASS:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_18;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
     Holder.constructorId++;
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    if (jj_2_8(2147483647)) {
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_7(2)) {
          PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        Arguments();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    Block();
  }

/*
* Type, name and expression syntax follows.
*/
  final public void Type() throws ParseException {
    if (jj_2_9(2)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      label_19:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        if (jj_2_10(2)) {
          ;
        } else {
          break label_19;
        }
      }
      break;
    case IDENTIFIER:
      ClassOrInterfaceType();
      label_20:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_12(2)) {
      TypeArguments();
    } else {
      ;
    }
    label_21:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      if (jj_2_14(2)) {
        TypeArguments();
      } else {
        ;
      }
    }
  }

  final public void TypeArguments() throws ParseException {
    jj_consume_token(LT);
    TypeArgument();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_22;
      }
      jj_consume_token(COMMA);
      TypeArgument();
    }
    jj_consume_token(GT);
  }

  final public void TypeArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      ReferenceType();
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        WildcardBounds();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      ReferenceType();
      break;
    case SUPER:
      jj_consume_token(SUPER);
      ReferenceType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_23:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_23;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void NameList() throws ParseException {
    Name();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_24;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

/*
* Expression syntax follows.
*/
  final public void Expression() throws ParseException {
    ConditionalExpression();
    if (jj_2_16(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_25;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(SC_AND);
      InclusiveOrExpression();
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_27;
      }
      jj_consume_token(BIT_OR);
      ExclusiveOrExpression();
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_28;
      }
      jj_consume_token(XOR);
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_29;
      }
      jj_consume_token(BIT_AND);
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      Type();
      break;
    default:
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_32:
    while (true) {
      if (jj_2_17(1)) {
        ;
      } else {
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      default:
        if (jj_2_18(1)) {
          RSIGNEDSHIFT();
        } else if (jj_2_19(1)) {
          RUNSIGNEDSHIFT();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REM:
        jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      if (jj_2_20(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_21(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_22(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
  }

  final public void CastExpression() throws ParseException {
    if (jj_2_23(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(RPAREN);
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_35:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_35;
      }
      PrimarySuffix();
    }
  }

  final public void MemberSelector() throws ParseException {
    jj_consume_token(DOT);
    TypeArguments();
    jj_consume_token(IDENTIFIER);
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case NEW:
      AllocationExpression();
      break;
    default:
      if (jj_2_25(2147483647)) {
        ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_26(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_27(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else if (jj_2_28(3)) {
      MemberSelector();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        Arguments();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentList();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_36;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_29(2)) {
      jj_consume_token(NEW);
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassOrInterfaceBody(false);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
* The third LOOKAHEAD specification below is to parse to PrimarySuffix
* if there is an expression between the "[...]".
*/
  final public void ArrayDimsAndInits() throws ParseException {
    if (jj_2_32(2)) {
      label_37:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        if (jj_2_30(2)) {
          ;
        } else {
          break label_37;
        }
      }
      label_38:
      while (true) {
        if (jj_2_31(2)) {
          ;
        } else {
          break label_38;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_39:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_39;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
* Statement syntax follows.
*/
  final public void Statement() throws ParseException {
    if (jj_2_33(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        AssertStatement();
        break;
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssertStatement() throws ParseException {
    jj_consume_token(ASSERT);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
  }

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case PARCLASS:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_40;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_34(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
      case PARCLASS:
        ClassOrInterfaceDeclaration(0);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      ;
    }
    Type();
    VariableDeclarator();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_41;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_42;
      }
      SwitchLabel();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case PARCLASS:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_43;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    if (jj_2_35(2147483647)) {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForInit();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForUpdate();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void ForInit() throws ParseException {
    if (jj_2_36(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_44;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
  }

  final public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

  final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    Block();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_45;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      ;
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
* type declaration syntax with generics clean
*/
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public void Annotation() throws ParseException {
    if (jj_2_37(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_38(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_46;
      }
      jj_consume_token(COMMA);
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    MemberValue();
    label_47:
    while (true) {
      if (jj_2_39(2)) {
        ;
      } else {
        break label_47;
      }
      jj_consume_token(COMMA);
      MemberValue();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody();
  }

  final public void AnnotationTypeBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PARCLASS:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_48;
      }
      AnnotationTypeMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PARCLASS:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      modifiers = Modifiers();
      if (jj_2_40(2147483647)) {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
        case PARCLASS:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        case AT:
          AnnotationTypeDeclaration(modifiers);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          FieldDeclaration(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
    MemberValue();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(ODBANDWIDTH)) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(ODMEMORY)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(ODPOWER)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(ODWALLTIME)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(ODMANUAL)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(ODSEARCH)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(ODURL)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_302()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_303()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_288()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(OD)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_286()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_287()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_278()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_276()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_99()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_100()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_241()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_276()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_312()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    if (jj_3R_251()) return true;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_172()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_266()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_62()) return true;
    if (jj_3R_246()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_147()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_219()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_321()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_275()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_260()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(PARCLASS)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    if (jj_3R_246()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_284()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_172()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    if (jj_3R_203()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_125()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_76()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    }
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) return true;
    }
    }
    }
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_218()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_215()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_212()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_201()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_194()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_76()) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_67()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_241()) return true;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(ODRUNLOCAL)) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(ODENCODING)) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(ODPROTOCOL)) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(ODEXECUTABLE)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(ODJOBURL)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(ODDIRECTORY)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public POPJParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public POPJParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public POPJParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new POPJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public POPJParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new POPJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public POPJParser(POPJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(POPJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
